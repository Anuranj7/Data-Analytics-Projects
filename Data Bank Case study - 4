Part A - Customer Nodes Exploration

Q1 : How many unique nodes are there on the Data Bank system?

SELECT count(DISTINCT node_id) AS unique_nodes
FROM customer_nodes;

Q2 : What is the number of nodes per region?

SELECT region_id,
       region_name,
       count(node_id) AS node_count
FROM customer_nodes
INNER JOIN regions USING(region_id)
GROUP BY region_id;

Q3 : How many customers are allocated to each region?

SELECT region_id,
       region_name,
       count(DISTINCT customer_id) AS customer_count
FROM customer_nodes
INNER JOIN regions USING(region_id)
GROUP BY region_id;

Q4 : How many days on average are customers reallocated to a different node?

SELECT round(avg(datediff(end_date, start_date)), 2) AS avg_days
FROM customer_nodes
WHERE end_date!='9999-12-31';

Q5 : What is the median, 80th and 95th percentile for this same reallocation days metric for each region?

> 95th percentile

WITH reallocation_days_cte AS
  (SELECT *,
          (datediff(end_date, start_date)) AS reallocation_days
   FROM customer_nodes
   INNER JOIN regions USING (region_id)
   WHERE end_date!='9999-12-31'),
     percentile_cte AS
  (SELECT *,
          percent_rank() over(PARTITION BY region_id
                              ORDER BY reallocation_days)*100 AS p
   FROM reallocation_days_cte)
SELECT region_id,
       region_name,
       reallocation_days
FROM percentile_cte
WHERE p >95
GROUP BY region_id;

> 80th percentile

WITH reallocation_days_cte AS
  (SELECT *,
          (datediff(end_date, start_date)) AS reallocation_days
   FROM customer_nodes
   INNER JOIN regions USING (region_id)
   WHERE end_date!='9999-12-31'),
     percentile_cte AS
  (SELECT *,
          percent_rank() over(PARTITION BY region_id
                              ORDER BY reallocation_days)*100 AS p
   FROM reallocation_days_cte)
SELECT region_id,
       region_name,
       reallocation_days
FROM percentile_cte
WHERE p >95
GROUP BY region_id;

> 50th percentile

WITH reallocation_days_cte AS
  (SELECT *,
          (datediff(end_date, start_date)) AS reallocation_days
   FROM customer_nodes
   INNER JOIN regions USING (region_id)
   WHERE end_date!='9999-12-31'),
     percentile_cte AS
  (SELECT *,
          percent_rank() over(PARTITION BY region_id
                              ORDER BY reallocation_days)*100 AS p
   FROM reallocation_days_cte)
SELECT region_id,
       region_name,
       reallocation_days
FROM percentile_cte
WHERE p >50
GROUP BY region_id;

Part B - Customer Transactions

Q1 : What is the unique count and total amount for each transaction type?

SELECT txn_type,
       count(*) AS unique_count,
       sum(txn_amount) AS total_amont
FROM customer_transactions

Q2 : What is the average total historical deposit counts and amounts for all customers?

SELECT round(count(customer_id)/
               (SELECT count(DISTINCT customer_id)
                FROM customer_transactions)) AS average_deposit_count,
       concat('$', round(avg(txn_amount), 2)) AS average_deposit_amount
FROM customer_transactions
WHERE txn_type = "deposit";
GROUP BY txn_type;

Q3 : For each month - how many Data Bank customers make more than 1 deposit and either 1 purchase or 1 withdrawal in a single month?

WITH transaction_count_per_month_cte AS
  (SELECT customer_id,
          month(txn_date) AS txn_month,
          SUM(IF(txn_type="deposit", 1, 0)) AS deposit_count,
          SUM(IF(txn_type="withdrawal", 1, 0)) AS withdrawal_count,
          SUM(IF(txn_type="purchase", 1, 0)) AS purchase_count
   FROM customer_transactions
   GROUP BY customer_id,
            month(txn_date))
SELECT txn_month,
       count(DISTINCT customer_id) as customer_count
FROM transaction_count_per_month_cte
WHERE deposit_count>1
  AND (purchase_count = 1
       OR withdrawal_count = 1)
GROUP BY txn_month;

Q4 : What is the closing balance for each customer at the end of the month?

WITH txn_monthly_balance_cte AS
  (SELECT customer_id,
          txn_amount,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            month(txn_date)
   ORDER BY customer_id)
SELECT customer_id,
       txn_month,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS closing_balance
FROM txn_monthly_balance_cte;

Part C - Data Allocation Challenge

> running customer balance column that includes the impact each transaction

 WITH transaction_amt_cte AS
  (SELECT *,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            txn_date
   ORDER BY customer_id,
            txn_date),
      running_customer_balance_cte AS
  (SELECT customer_id,
          txn_date,
          txn_month,
          txn_type,
          txn_amount,
          sum(net_transaction_amt) over(PARTITION BY customer_id
                                        ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS running_customer_balance
   FROM transaction_amt_cte)
SELECT *
FROM running_customer_balance_cte;

> customer balance at the end of each month

 WITH transaction_amt_cte AS
  (SELECT *,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            txn_date
   ORDER BY customer_id,
            txn_date),
      running_customer_balance_cte AS
  (SELECT customer_id,
          txn_date,
          txn_month,
          txn_type,
          txn_amount,
          sum(net_transaction_amt) over(PARTITION BY customer_id
                                        ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS running_customer_balance
   FROM transaction_amt_cte),
      month_end_balance_cte AS
  (SELECT *,
          last_value(running_customer_balance) over(PARTITION BY customer_id, txn_month
                                                    ORDER BY txn_month) AS month_end_balance
   FROM running_customer_balance_cte
   GROUP BY customer_id,
            txn_month)
SELECT customer_id,
       txn_month,
       month_end_balance
FROM month_end_balance_cte;

> minimum, average and maximum values of the running balance for each customer
WITH transaction_amt_cte AS
  (SELECT *,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            txn_date
   ORDER BY customer_id,
            txn_date),
     running_customer_balance_cte AS
  (SELECT customer_id,
          txn_date,
          txn_month,
          txn_type,
          txn_amount,
          sum(net_transaction_amt) over(PARTITION BY customer_id
                                        ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS running_customer_balance
   FROM transaction_amt_cte
   GROUP BY customer_id,
            txn_month)
SELECT customer_id,
       min(running_customer_balance),
       max(running_customer_balance),
       round(avg(running_customer_balance), 2) AS 'avg(running_customer_balance)'
FROM running_customer_balance_cte
GROUP BY customer_id
ORDER BY customer_id ;

Option 1: Data is allocated based off the amount of money at the end of the previous month
How much data would have been required on a monthly basis?

WITH transaction_amt_cte AS
  (SELECT *,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            txn_date
   ORDER BY customer_id,
            txn_date),
     running_customer_balance_cte AS
  (SELECT customer_id,
          txn_date,
          txn_month,
          txn_type,
          txn_amount,
          sum(net_transaction_amt) over(PARTITION BY customer_id
                                        ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS running_customer_balance
   FROM transaction_amt_cte),
     month_end_balance_cte AS
  (SELECT *,
          last_value(running_customer_balance) over(PARTITION BY customer_id, txn_month
                                                    ORDER BY txn_month) AS month_end_balance
   FROM running_customer_balance_cte),
     customer_month_end_balance_cte AS
  (SELECT customer_id,
          txn_month,
          month_end_balance
   FROM month_end_balance_cte
   GROUP BY customer_id,
            txn_month)
SELECT txn_month,
       sum(month_end_balance) AS data_required_per_month
FROM customer_month_end_balance_cte
GROUP BY txn_month
ORDER BY txn_month

Option 2: Data is allocated on the average amount of money kept in the account in the previous 30 days
How much data would have been required on a monthly basis?

WITH transaction_amt_cte AS
  (SELECT *,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            txn_date
   ORDER BY customer_id,
            txn_date),
     running_customer_balance_cte AS
  (SELECT customer_id,
          txn_date,
          txn_month,
          txn_type,
          txn_amount,
          sum(net_transaction_amt) over(PARTITION BY customer_id
                                        ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS running_customer_balance
   FROM transaction_amt_cte
   GROUP BY customer_id,
            txn_month),
     avg_running_customer_balance AS
  (SELECT customer_id,
          txn_month,
          avg(running_customer_balance) over(PARTITION BY customer_id) AS 'avg_running_customer_balance'
   FROM running_customer_balance_cte
   GROUP BY customer_id,
            txn_month
   ORDER BY customer_id)
SELECT txn_month,
       round(sum(avg_running_customer_balance)) AS data_required_per_month
FROM avg_running_customer_balance
GROUP BY txn_month;

Option 3: Data is updated real-time
How much data would have been required on a monthly basis?

WITH transaction_amt_cte AS
  (SELECT *,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,
            txn_date
   ORDER BY customer_id,
            txn_date),
     running_customer_balance_cte AS
  (SELECT customer_id,
          txn_date,
          txn_month,
          txn_type,
          txn_amount,
          net_transaction_amt,
          sum(net_transaction_amt) over(PARTITION BY customer_id
                                        ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS running_customer_balance
   FROM transaction_amt_cte)
SELECT txn_month,
       SUM(running_customer_balance) AS data_required_per_month
FROM running_customer_balance_cte
GROUP BY txn_month;
