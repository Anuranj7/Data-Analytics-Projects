Part A - Digital Analysis

Q1: How many users are there?

 SELECT
 count(DISTINCT user_id) AS user_count
FROM users

Q2: How many cookies does each user have on average?

SELECT
 ROUND(AVG(cookie_id_count),0) AS avg_cookie_id
FROM (
 SELECT
   user_id,
   COUNT(cookie_id) AS cookie_id_count
 FROM users
 GROUP BY user_id)x
 
3: What is the unique number of visits by all users per month?

 SELECT
 MONTH(event_time),
 COUNT(DISTINCT visit_id) AS unique_visit_count
FROM events
GROUP BY MONTH(event_time)

4: What is the number of events for each event type?

SELECT
  event_type,
  COUNT(*) AS event_count
FROM events
GROUP BY event_type
ORDER BY event_type

5: What is the percentage of visits which have a purchase event?

SELECT
  100 * COUNT(DISTINCT e.visit_id)/
    (SELECT COUNT(DISTINCT visit_id) FROM clique_bait.events) AS percentage_purchase
FROM events AS e
JOIN event_identifier AS ei
  ON e.event_type = ei.event_type
WHERE ei.event_name = 'Purchase'

6: What is the percentage of visits which view the checkout page but do not have a purchase event?

select 100-((sum(purchase)/sum(checkout))*100 ) as percentage_checkout_view_with_no_purchase from (SELECT
  visit_id,
  sum(CASE WHEN event_type = 1 AND page_id = 12 THEN 1 ELSE 0 END) AS checkout,
  sum(CASE WHEN event_type = 3  THEN 1 ELSE 0 END) AS purchase
FROM events
GROUP BY visit_id
order by visit_id)x

Q7: What are the top 3 pages by number of views?

SELECT
 ph.page_name,
 COUNT(*) AS page_views
FROM events AS e
JOIN page_hierarchy AS ph
  ON e.page_id = ph.page_id
WHERE e.event_type = 1
GROUP BY ph.page_name
ORDER BY page_views DESC
LIMIT 3

Q8: What is the number of views and cart adds for each product category?

SELECT
  ph.product_category,
  SUM(CASE WHEN e.event_type = 1 THEN 1 ELSE 0 END) AS page_views,
  SUM(CASE WHEN e.event_type = 2 THEN 1 ELSE 0 END) AS cart_adds
FROM events AS e
JOIN page_hierarchy AS ph
  ON e.page_id = ph.page_id
WHERE ph.product_category IS NOT NULL
GROUP BY ph.product_category
ORDER BY page_views DESC

Q9: What are the top 3 products by purchases?

SELECT
  ph.product_category, count(*) as purchase_count
FROM events AS e
JOIN page_hierarchy AS ph
  ON e.page_id = ph.page_id
WHERE ph.product_category IS NOT NULL and e.event_type = 1
GROUP BY ph.product_category
order by purchase_count desc
product funnel analysis

Part B - Product Funnel Analysis

How many times was each product viewed? 
How many times was each product added to cart? 
How many times was each product added to a cart but not purchased (abandoned)? 
How many times was each product purchased?

Solution for all the question in a combined query

with prod_view_cart as (
select e.visit_id, p_h.product_id,p_h.page_name as products, p_h.product_category as pc, e.event_type, e.page_id,
sum(case when event_type = 1 then 1 else 0 end) as page_view,
sum(case when event_type = 3 then 1 else 0 end) as cart_add
from events as e inner join
page_hierarchy as p_h
on e.page_id = p_h.page_id
where p_h.product_id is not null
group by e.visit_id, p_h.product_id, e.event_type, e.page_id
)
,
purchase_table as(
 select distinct visit_id from
 prod_view_cart
 where event_type = 1
 )
 ,combined as (
 select vc.visit_id, vc.product_id, vc.event_type, vc.page_id, vc.page_view, vc.cart_add, vc.products, pc
 , case when pt.visit_id is not null then 1 else 0 end as purchase
 from prod_view_cart as vc
 left join purchase_table as pt
 on pt.visit_id = vc.visit_id
 ) ,
  product_new_info as(
 select products, pc, sum(page_view) as views , sum(cart_add) as cart_add,
 sum(case when cart_add = 1 and purchase = 0 then 1 else 0 end) as abandoned,
 sum(case when cart_add = 1 and purchase = 1 then 1 else 0 end) as purhcase
 from combined
 group by products, pc
 )
 select * from product_new_info
 
Additionally, create another table which further aggregates the data for the above points but this time for each product category instead of individual products.

In the above table remove product name then we will get the query for this

Q1: Which product had the most views, cart adds and purchases?

select max(views) from product_new_info

Q2: Which product was most likely to be abandoned?

select product, count(abandoned) from product_new_info
group by product

Q3: Which product had the highest view to purchase percentage?

SELECT
    product
  pc,
  ROUND(100 * purchase/views,2) AS purchase_per_view_percentage
FROM product_new_info
ORDER BY purchase_per_view_percentage DES

Q4:What is the average conversion rate from view to cart add?

SELECT
 ROUND(100*AVG(cart_adds/views),2) AS avg_view_to_cart_add_conversion
FROM product_info

Q5:What is the average conversion rate from cart add to purchase?

SELECT
  ROUND(100*AVG(cart_adds/views),2) AS avg_view_to_cart_add_conversion,
  ROUND(100*AVG(purchases/cart_adds),2) AS avg_cart_add_to_purchases_conversion_rate
FROM product_info

Part C - Campaigns Analysis

Generate a table that has 1 single row for every unique visit_id record and has the following columns:

user_id
visit_id
visit_start_time: the earliest event_time for each visit
page_views: count of page views for each visit
cart_adds: count of product cart add events for each visit
purchase: 1/0 flag if a purchase event exists for each visit
campaign_name: map the visit to a campaign if the visit_start_time falls between the start_date and end_date
impression: count of ad impressions for each visit
click: count of ad clicks for each visit
(Optional column) cart_products: a comma separated text value with products added to the cart sorted by the order they were added to the cart (hint: use the sequence_number)
Solution

Steps:

We will merge multiple tables:
Using INNER JOIN for users and events table
Joining campaign_identifier table using LEFT JOIN as we want all lines that have event_time between start_date and end_date.
Joining page_hierachy table using LEFT JOIN as we want all the rows in the page_hierachy table
To generate earliest visit_start_time for each unique visit_id, use MIN() to find the 1st visit_time.
Wrap SUM() with CASE statement in order to find the total number of counts for page_views, cart_adds, purchase, ad impression and ad click.
To get a list of products added into cart sorted by sequence,
Firstly, use a CASE statement to only get cart add events.
Then, use STRING_AGG() to separate products by comma , and sort the sequence using sequence_number.

SELECT 
  u.user_id, e.visit_id, 
  MIN(e.event_time) AS visit_start_time,
  SUM(CASE WHEN e.event_type = 1 THEN 1 ELSE 0 END) AS page_views,
  SUM(CASE WHEN e.event_type = 2 THEN 1 ELSE 0 END) AS cart_adds,
  SUM(CASE WHEN e.event_type = 3 THEN 1 ELSE 0 END) AS purchase,
  c.campaign_name,
  SUM(CASE WHEN e.event_type = 4 THEN 1 ELSE 0 END) AS impression, 
  SUM(CASE WHEN e.event_type = 5 THEN 1 ELSE 0 END) AS click, 
  STRING_AGG(CASE WHEN p.product_id IS NOT NULL AND e.event_type = 2 THEN p.page_name ELSE NULL END, 
    ', ' ORDER BY e.sequence_number) AS cart_products
FROM clique_bait.users AS u
INNER JOIN clique_bait.events AS e
  ON u.cookie_id = e.cookie_id
LEFT JOIN clique_bait.campaign_identifier AS c
  ON e.event_time BETWEEN c.start_date AND c.end_date
LEFT JOIN clique_bait.page_hierarchy AS p
  ON e.page_id = p.page_id
GROUP BY u.user_id, e.visit_id, c.campaign_name;
